34715 - Lab Work - Write a C program to implement Binary Search Tree using using Array

Solution :-
BinarySearchTree.c

#include <conio.h>
#include <stdio.h>
#include <stdlib.h>
#define TRUE 1
#define TREENODES 100
#define FALSE 0
struct tree {
  int info;
  int used;
};
struct tree node[TREENODES];
void Createtree();
void Insert(int);
void Display();
void Setleft(int, int);
void Setright(int, int);

void Createtree(int x) {
  int i;
  node[0].info = x;
  node[0].used = TRUE;
  for (i = 1; i < TREENODES; i++) node[i].used = FALSE;
}

void Insert(int x) {
  int p, q;
  p = q = 0;
  while (q < TREENODES && node[q].used && x != node[p].info) {
    p = q;
    if (x < node[p].info)
      q = 2 * p + 1;
    else
      q = 2 * p + 2;
  }
  if (x == node[p].info)
    printf("%d is a duplicate number\n", x);
  else if (x < node[p].info)
    Setleft(p, x);
  else
    Setright(p, x);
}

void Setleft(int pos, int x) {
  int q;
  q = 2 * pos + 1;
  if (q > TREENODES)
    printf("Array overflow.");
  else if (node[q].used == TRUE)
    printf("Invalid insertion.");
  else {
    node[q].info = x;
    node[q].used = TRUE;
  }
}

void Setright(int pos, int x) {
  int q;
  q = 2 * pos + 2;
  if (q > TREENODES)
    printf("Array overflow.");
  else if (node[q].used == TRUE)
    printf("Invalid insertion.\n");
  else {
    node[q].info = x;
    node[q].used = TRUE;
  }
}

void Display() {
  int i;
  for (i = 0; i < TREENODES; i++)
    if (node[i].used == TRUE) printf("%d ", node[i].info);
  printf("\n");
}
void main() {
  int x, y;
  char ch = '1';
  printf("Enter root node value:");
  scanf("%d", &x);
  Createtree(x);
  while (ch != '3') {
    printf("1.Insert\n2.Display\n3.Quit\nEnter your choice: ");
    scanf("%d", &y);
    switch (y) {
      case 1:
        printf("Enter the element to be inserted:");
        scanf("%d", &x);
        Insert(x);
        break;
      case 2:
        Display();
        break;
      case 3:
        exit(0);
        break;
      default:
        printf("Out of Range...!\n");
        break;
    }
  }
}


34717 - Lab Work - Write a C program to print the successor and predecessor of a particular node in a binary tree

Solution :-
TreeMain.c

#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void updateElement(char *tree, int arraySize, char s, char t) {
  for (int i = 0; i < arraySize; i++) {
    if (tree[i] == s) {
      tree[i] = t;
    }
  }
}
int setRoot(int dataKey, char *tree) {
  if (tree[0] != '\0')
    printf("Root is already available\n");
  else
    tree[0] = dataKey;
  return 0;
}

int addLeft(char dataKey, int parentIndex, char *tree) {
  if (tree[parentIndex] == '\0')
    printf("No parent found\n");
  else
    tree[(parentIndex * 2) + 1] = dataKey;
  return 0;
}

int addRight(char dataKey, int parentIndex, char *tree) {
  if (tree[parentIndex] == '\0')
    printf("No parent found\n");
  else
    tree[(parentIndex * 2) + 2] = dataKey;
  return 0;
}

int displayTree(char *tree, int arraySize) {
  for (int i = 0; i < arraySize; i++) {
    if (tree[i] != '\0') printf("%c ", tree[i]);
  }
  return 0;
}
void operation(char *tree, char node, int arraySize) {
  int i, k;
  for (i = 0; i < arraySize; i++) {
    if (tree[i] == node) k = i;
    // break;
  }
  char pre = tree[2 * k + 1];
  char suc = tree[2 * k + 2];
  if (pre != '\0')
    printf("Predecessor is: %c\n", tree[2 * k + 1]);
  else
    printf("No predecessor\n");
  if (suc != '\0')
    printf("Successor is: %c\n", tree[2 * k + 2]);
  else
    printf("No successor");
}
// Driver Code
int main() {
  char *tree;
  char ch, choice, node;
  printf("Enter the number of nodes: ");
  int n, index;
  scanf("%d", &n);
  int height = round(log2(n) + 1);
  int arraySize = pow(2, height) - 1;
  tree = (char *)malloc(arraySize * sizeof(char));
  memset(tree, '\0', sizeof(char *) * arraySize);
  printf("Enter the data key in root node: ");
  scanf(" %c", &ch);
  setRoot(ch, tree);
  if (n > 1) {
    printf("Enter rest of the nodes in the binary tree:\n");
    for (int i = 1; i < n; i++) {
      printf("Enter R or r for right and L or l for left side insertion: ");
      scanf(" %c", &choice);
      if (choice == 'R' || choice == 'r') {
        printf("Enter datakey and parent index: ");
        scanf(" %c", &ch);
        scanf("%d", &index);
        addRight(ch, index, tree);
      } else {
        printf("Enter datakey and parent index: ");
        scanf(" %c", &ch);
        scanf("%d", &index);
        addLeft(ch, index, tree);
      }
    }
  }
  printf("Binary tree is:\n");
  displayTree(tree, arraySize);

  printf("\nEnter the node: ");
  scanf(" %c", &node);
  operation(tree, node, arraySize);

  return 0;
}

