1.	Write a program to implement stack using arrays.
Sample Input and Output:
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 4
	Stack is empty.
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 2
	Stack is underflow.
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 3
	Stack is empty.
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 5
	Stack is underflow.
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 1
	Enter element : 25
	Successfully pushed.
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 1
	Enter element : 26
	Successfully pushed.
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 3
	Elements of the stack are : 26 25 
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 2
	Popped value = 26
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 4
	Stack is not empty.
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 5
	Peek value = 25
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 6


Solution: 
//File Name: StackUsingArray.c
//==================================
#include <stdio.h>
#include <stdlib.h>
#define STACK_MAX_SIZE 10
#include "StackOperations.c"

int main() {
	int op, x;
	while(1) {	
		printf("1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit\n");
		printf("Enter your option : ");
		scanf("%d", &op);
		switch(op) {
			case 1: 
				printf("Enter element : ");
				scanf("%d", &x);
				push(x);
				break;
			case 2:
				pop();
				break;
			case 3: 
				display();
				break;
			case 4:
				isEmpty();
				break;
			case 5:
				peek();
				break;
			case 6: 
				exit(0);
		}
	}
}

//File Name: StackOperations.c
//==================================
int top=-1,stack[STACK_MAX_SIZE];
void push(int n)
{
	if(top+1<STACK_MAX_SIZE)
	{
		top++;
		stack[top]=n;
		printf("Successfully pushed.\n");
	}
	else
	printf("Stack is overflow.\n");
}
void pop(){
	if(top<0)
	{
		printf("Stack is underflow.\n");
	}
	else
	{
		printf("Popped value = %d\n",stack[top]);
		top--;
	}
}
void display()
{
	if(top>=0)
	{
		printf("Elements of the stack are : ");
		for(int i=top;i>=0;i--)
		{
			printf("%d ",stack[i]);
		}
	}
		else
		{
			printf("Stack is empty.");
		}
		printf("\n");
}
void isEmpty()
{
	if(top<0)
	{
		printf("Stack is empty.\n");
	}
	else
	{
		printf("Stack is not empty.\n");
	}
}
void peek()
{
	if(top>=0)
	printf("Peek value = %d\n",stack[top]);
	else
	printf("Stack is underflow.\n");
}













2.	Write the code in the functions isEmpty(), push(int x), pop() and evaluatePostfix(char *e) in the below program according to hints given as comment lines.

Sample Output -1
Enter the postfix expression : 234+-
Result : -5
Sample Output -2
Enter the postfix expression : 345+-34-
Invalid postfix expression.

Solutions: 

//File Name: PostfixEvaluation.c
//==================================
#include <ctype.h>
#include <stdio.h>
#define STACK_MAX_SIZE 20
//Declare the required stack variables.
int stack[20];
int top=-1;
//Return 1 if stack is empty else return 0.
int isEmpty() {
}

//Push the character into stack
void push(int x) {
	if(top>=STACK_MAX_SIZE-1){
		printf("Stack overflow\n");
	}
	else{
	    top++;
	    stack[top]=x;
	}
}

//pop a character from stack
int pop() {
	int x;
	if(top<0)
	printf("Stack underflow\n");
	else{
		x=stack[top];
		top=top-1;
	return x;
	}
}

//Output Format - Result : <result> if the input postfix expression is vaild.
//Output Format - Invalid postfix expression,. - if the input expression is invalid.
//postfix expression is given as the parameter.
void evaluatePostfix(char * e) {
	int num,n1,n2,n3,c1=0,c2=0;
	while(*e!='\0')
	{
		if(isdigit(*e))
		{
			num=*e-48;
			push(num);
			c1++;
		}
		else if(*e=='+'||*e=='-'||*e=='*'||*e=='/')
		{
			n1=pop();
			n2=pop();
			switch(*e)
			{
				case '+':
				{
					n3=n1+n2;
					break;
				}
				case '-':
				{
					n3=n2-n1;
					break;
				}
				case '*':
				{
					n3=n1*n2;
					break;
				}
				case '/':
				{
					n3=n2/n1;
					break;
				}
			}
			push(n3);
			c2++;
		}
		else
		{
			printf("Invalid postfix expression.\n");
			break;
		}
		e++;
	}
	if(c1-c2==1)
	printf("Result : %d\n",pop());
	else
	printf("Invalid postfix expression.\n");
}

//Read a postfix expression and evaluate it.
int main() {
	char exp[20];
	char *e, x;
	printf("Enter the postfix expression : ");
	scanf("%s",exp);
	e = exp;
	evaluatePostfix(e);

}






Home Assignment
1.	Write a C program to convert a Prefix expression to Postfix expression.
Solution :
//File Name: prefixToPostfix.c
//==================================
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define MAX 20
char str[MAX],stack[MAX];
int top=-1;
void push(char c)
{
	stack[++top]=c;
}
char pop()
{
	return stack[top--];
}
void pre_post()
{
	int n,i,j=0;
	char c[20];
	char a,b,op;
	printf("Enter a Prefix expression:");
	gets(str);
	n=strlen(str);
	for(i=0;i<MAX;i++)
	{
		stack[i]='\0';
	}
	printf("Postfix expression is:");
	for(i=0;i<n;i++)
	{
		if(str[i]=='+'||str[i]=='-'||str[i]=='*'||str[i]=='/')
		{
			push(str[i]);
		}
		else
		{
			c[j++]=str[i];
			while((top!=-1)&&(stack[top]=='@'))
			{
				a=pop();
				c[j++]=pop();
				
			}
			push('@');
		}
	}
	c[j]='\0';
	printf("%s\n",c);
}
void main()
{
	pre_post();
}




2.	Write a C program to convert an Infix expression to Prefix expression.
Solution: 
//File Name: infixToPrefix.c
//==================================
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<conio.h>
#define max 100
int top=-1, a[max];
void push(char x)
{
	a[++top]=x;
}
char pop(){
	if(top==-1)
	return -1;
	else
	return a[top--];
}
int prcd(char c)
{
	if(c==')')
	return 0;
	else if(c=='+'|| c=='-')
	return 1;
	else if(c=='*'|| c=='/')
	return 2;
}
void strrev(char *exp)
{
	int size=strlen(exp);
	int j=size,i=0;
	char temp[size];
	temp[j--]='\0';
	while(exp[i]!='\0')
	{
		temp[j]=exp[i];
		j--;
		i++;
	}
	strcpy(exp,temp);
}
void infixtoprefix(char infix[max],char prefix[max])
{
	char temp,x;
	int i=0,j=0;
	strrev(infix);
	while(infix[i]!='\0')
	{
		temp=infix[i];
		if(isalnum(temp))
		{
			prefix[j++]=temp;
		}
		else if(temp==')')
		push(temp);
		else if(temp=='(')
		{
			while((x=pop())!=')')
			{
				prefix[j++]=x;
			}
		}
		else
		{
			while(prcd(a[top])>=prcd(temp))
			{
				prefix[j++]=pop();
			}
		    push(temp);
		}
		i++;
	}
	while(top!=-1)
	prefix[j++]=pop();
	prefix[j]='\0';
	strrev(prefix);
}
void main()
{
	char infix[max],prefix[max];
	printf("Enter Infix Expression:");
	gets(infix);
	infixtoprefix(infix,prefix);
	
	printf("Prefix Expression:%s\n",prefix);
}




3.	Write the code in the functions convertInfix(char *e), priority(char x), push(char x), pop() and isEmpty in the below code according to the hints given as comment lines.
4.	Sample Output -1
5.	Enter the expression : A+B*(C+D)
6.	Postfix expression : ABCD+*+
7.	Sample Output -2
8.	Enter the expression : A+D*C+E-F&D
9.	Invalid symbols in infix expression. Only alphanumeric and { '+', '-','*', '%', '/' } are allowed.
10.	Sample Output -3
11.	Enter the expression : A+B*C+(D*E
12.	Invalid infix expression : unbalanced parenthesis.

Solution: 

//File Name: Infix2PostfixMain.c
//==================================
#include "Infix2PostfixOperation.c"
int main() {
	char exp[20];
	char *e, x;
	printf("Enter the expression : ");
	scanf("%s",exp);
	e = exp;
	convertInfix(e);
}

//File Name: Infix2PostfixOperation.c
//==================================
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <ctype.h>
#define STACK_MAX_SIZE 20
char stack [STACK_MAX_SIZE];

int top = -1;


//Push the character into stack
void push(char x) {
	stack[++top]=x;
}

//pop a character from stack
char pop() {
	if(top==-1)
	return -1;
	else
	return stack[top--];
}

// Return 0 if char is '('
// Return 1 if char is '+' or '-'
// Return 2 if char is '*' or '/' or '%'
int priority(char x) {
	if(x=='(')
	return 0;
	if(x=='+'||x=='-')
	return 1;
	if(x=='*'||x=='/'||x=='%')
	return 2;
	return 0;
}

//Output Format
//if expression is correct then output will be Postfix Expression : <postfix notation>
//If expression contains invalid operators then output will be "Invalid symbols in infix expression. Only alphanumberic and { '+', '-','*', '%%', '/' } are allowed."
//If the expression contains unbalanced paranthesis the output will be "Invalid infix expression : unbalanced parenthesis."
void convertInfix(char * e) {
	char x;
	char *p;
	p=e;
	int c1=0,c2=0,c3=0,c4=1;
	while(*p!='\0')
	{
		if(isalnum(*p)||*p=='+'||*p=='-'||*p=='*'||*p=='/'||*p=='%')
		c1++;
		else if(*p=='(')
		c2++;
		else if(*p==')')
		c3++;
		else
		{
		c4++;
		}
		p++;
	}
	if(c4!=1){
	printf("Invalid symbols in infix expression. Only alphanumeric and { '+', '-', '*', '%', '/' }\n");
	}
	else if(c2!=c3)
	printf("Invalid infix expression : unbalanced parenthesis.\n");
	else
	{
	printf("Postfix expression : ");
	while(*e!='\0')
	{
		if(isalnum(*e))
		printf("%c",*e);
		else if(*e=='(')
		{
		push(*e);
		}
		else if(*e==')')
		{
			while((x=pop())!='(')
			printf("%c",x);
		}
		else 
		{
			while(priority(stack[top])>=priority(*e))
			printf("%c",pop());
			push(*e);
		}
		e++;
	}
	while(top!=-1)
	{
		printf("%c",pop());
	}
	printf("\n");
	}
}



4. Write a program to implement stack using linked lists.


Sample Input and Output:
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 1
	Enter element : 33
	Successfully pushed.
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 1
	Enter element : 22
	Successfully pushed.
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 1
	Enter element : 55
	Successfully pushed.
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 1
	Enter element : 66
	Successfully pushed.
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 3
	Elements of the stack are : 66 55 22 33 
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 2
	Popped value = 66
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 2
	Popped value = 55
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 3
	Elements of the stack are : 22 33 
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 5
	Peek value = 22
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 4
	Stack is not empty.
	1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit
	Enter your option : 6


Solution :
//File Name: StackUsingLL.c
//==================================
#include <stdio.h>
#include <stdlib.h>
#include "StackOperationsLL.c"

int main() {
	int op, x;
	while(1) {	
		printf("1.Push 2.Pop 3.Display 4.Is Empty 5.Peek 6.Exit\n");
		printf("Enter your option : ");
		scanf("%d", &op);
		switch(op) {
			case 1: 
				printf("Enter element : ");
				scanf("%d", &x);
				push(x);
				break;
			case 2:
				pop();
				break;
			case 3: 
				display();
				break;
			case 4:
				isEmpty();
				break;
			case 5:
				peek();
				break;
			case 6: 
				exit(0);
		}
	}
}

//File Name: StackOperationsLL.c
//==================================
struct node
{
	int data;
	struct node*next;
}*top=NULL;
typedef struct node* N;
void push(int value){
	N newNode;
	newNode=(N)malloc(sizeof(struct node));
	newNode->data=value;
	if(top==NULL)
	{
		newNode->next=NULL;
	}
	else
	{
		newNode->next=top;
	}
	top=newNode;
	printf("Successfully pushed.\n");
}
void pop()
{
	if(top==NULL)
	{
		printf("Stack is underflow.\n");
	}
	else
	{
		N temp=top;
		printf("Popped value = %d\n",temp->data);
		top=temp->next;
		free(temp);
	}
}
void display()
{
	if(top==NULL)
	{
		printf("Stack is empty.\n");
	}
	else
	{
		N temp;
		temp=top;
		printf("Elements of the stack are : ");
		do{
			printf("%d ",temp->data);
			temp=temp->next;
		}
		while(temp!=NULL);
		printf("\n");
	}
}
void isEmpty()
{
	if(top==NULL)
	printf("Stack is empty.\n");
	else
	printf("Stack is not empty.\n");
}
void peek()
{
	if(top!=NULL)
	{
		N temp=top;
		printf("Peek value = %d\n",temp->data);
	}
	else
	{
		printf("Stack is underflow.\n");
	}
}



5. Write a C program to convert a Postfix expression to Prefix expression.

Solution: 
//File Name: postfixToPrefix.c
//==================================
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define MAX 20
char str[MAX],stack[MAX];
int top=-1;
void push(char c)
{
	stack[++top]=c;
}
char pop()
{
	return stack[top--];
}
int check(char ch)
{
	return (ch>='a' && ch<='z')||(ch>='A' && ch<='Z');
}
int isOperator(char x)
{
	switch(x){
		case '+':
		case '-':
		case '/':
		case '*':
		 return 1;
	}
	return 0;
}
void postfixToprefix()
{
	int n,i,j=0;
	char c[20];
	char a,b,op;
	printf("Enter the postfix expression:");
	scanf("%s",str);
	n=strlen(str);
	for(i=0;i<MAX;i++)
		stack[i]='\0';
	printf("Prefix expression is:");
	for(i=n-1;i>=0;i--)
	{
		if(isOperator(str[i]))
		{
			push(str[i]);
		}
		else
		{
			c[j++]=str[i];
			while((top!=-1) && (stack[top]=='#'))
			{
				a=pop();
				c[j++]=pop();
				
			}
			push('#');
		}
	}
	c[j]='\0';
	i=0;
	j=strlen(c)-1;
	char d[20];
	while(c[i]!='\0'){
		d[j--]=c[i++];
	}
	printf("%s\n",d);
}
int main()
{
	postfixToprefix();
	return 0;
}
