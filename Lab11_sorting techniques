DS using C - Lab â€“ 11 (Sorting Techniques)


10685 - Lab Work - Write a C program to Sort given elements using Merge sort

Solution :-
MergeSortMain.c

void display(int arr[15], int n) {
	int i;
	for (i = 0; i < n; i++)
		printf("%d ", arr[i]);
	printf("\n");
}
void merge(int arr[15], int low, int mid, int high) {
	int i = low, h = low, j = mid + 1, k, temp[15];
	while (h <= mid && j <= high) {
		if (arr[h] <= arr[j]) {
			temp[i] = arr[h];
			h++;
		} else {
			temp[i] = arr[j];
			j++;
		}
		i++;
	}
	if (h > mid) {
		for (k = j; k <= high; k++) {
			temp[i] = arr[k];
			i++;
		}
	} else {
		for (k = h; k <= mid; k++) {
			temp[i] = arr[k];
			i++;
		}
	}
	for (k = low; k <= high; k++) {
		arr[k] = temp[k];
	}
}
void splitAndMerge(int arr[15], int low, int high) {
	if (low < high) {
		int mid = (low + high) / 2;
		splitAndMerge(arr, low, mid);
		splitAndMerge(arr, mid + 1, high);
		merge(arr, low, mid, high);
	}
}

17 - Lab Work - Write a C program to implement Index Sequential Search

Solution :-
SeqSearch.c

#include <stdio.h>
#include <stdlib.h>
void InSeq(int arr[], int n, int k) {
    int Gsize = 100;
    int elements[Gsize], gstartind[100], i, set = 0;
    int j = 0, ind = 0, start, end;
    for (i = 0; i < n; i += 3) {
        elements[ind] = arr[i];
        gstartind[ind] = i;
        ind++;
    }
    if (k < elements[0]) {
        printf("Not found");
        exit(0);
    } else {
        for (i = 1; i <= ind; i++)
            if (k <= elements[i]) {
                start = gstartind[i - 1];
                end = gstartind[i];
                set = 1;
                break;
            }
    }
    if (set == 0) {
        start = gstartind[ind - 1];
        end = n - 1;
    }
    for (i = start; i <= end; i++) {
        if (k == arr[i]) {
            j = 1;
            break;
        }
    }
    if (j == 1)
        printf("Found at index %d", i);
    else
        printf("Not found");
}
// Driver code
void main() {
    int arr[100],n,i,k,a,j;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    for(i=0; i < n; ++i) {
        printf("Enter number%d: ",i+1);
        scanf("%d", &arr[i]);
    }
     for (i = 0; i < n; ++i){
      for (j = i + 1; j < n; ++j){
         if (arr[i] > arr[j]){
            a = arr[i];
            arr[i] = arr[j];
            arr[j] = a;
         }
      }
   }
    printf("Enter search value: ");
    scanf("%d", &k);
    printf("Sorted array: ");
        for(i=0; i < n; ++i) {
        printf("%d ",arr[i]);
    }
    printf("\n");
    InSeq(arr, n, k);
}

10695 - Lab Work - Write a C program to Sort given elements using Quick sort

Solution :-
QuickSortMain.c

void display(int arr[15], int n) {
	int i;
	for (i = 0; i < n; i++)
		printf("%d ", arr[i]);
	printf("\n");
}
int partition(int arr[15], int lb, int ub) {
	int pivot, down = lb, up = ub, temp;
	pivot = arr[lb];
	while (down < up) {
		while (arr[down] <= pivot && down < up) {
			down++;
		}
		while (arr[up] > pivot) {
			up--;
		}
		if (down < up) {
			temp = arr[up];
			arr[up] = arr[down];
			arr[down] = temp;
		}
	}
	arr[lb] = arr[up];
	arr[up] = pivot;
	return up;
}
void quickSort(int arr[15], int low, int high) {
	int j;
	if (low < high) {
		j = partition(arr, low, high);
		quickSort(arr, low, j - 1);
		quickSort(arr, j + 1, high);
	}
}






10724 - Lab Work - Write a C program to sort given elements using Radix sort
 
Solution :-
RadixSortMain2.c

int largest(int a[], int n) {
    int large = a[0], i;
    for(i = 1; i < n; i++) {
        if(large < a[i])
            large = a[i];
    }
    return large;
}

void printArray(int arr[], int n) {
	for (int i=0; i<n; i++)
		printf("%d ",arr[i]);
	printf("\n");
}

void RadixSort(int a[], int n) {
    int bucket[10][10], bucket_count[10];
    int i, j, k, remainder, NOP=0, divisor=1, large, pass;
    large = largest(a, n);
    while(large > 0) {
        NOP++;
        large/=10;
    }
    for(pass = 0; pass < NOP; pass++) {
        for(i = 0; i < 10; i++) {
            bucket_count[i] = 0;
        }
        for(i = 0; i < n; i++) {
            remainder = (a[i] / divisor) % 10;
            bucket[remainder][bucket_count[remainder]] = a[i];
            bucket_count[remainder] += 1;
        }
        i = 0;
        for(k = 0; k < 10; k++) {
            for(j = 0; j < bucket_count[k]; j++) {
                a[i] = bucket[k][j];
                i++;
            }
        }
        divisor *= 10;
    }
}





9520 - Lab Work - Collision resolution techniques : linear probing

Solution :-
HashingMain2.c

#define SIZE 10

int HashTable[SIZE];

int hash(int x) {
	return x % SIZE;
}
void insert(int x) {
	int index = hash(x);
	int start = index;
	while (HashTable[index] != -1) {
		 if (HashTable[index] == -1) {
			break;
		 }
		 index = (index+1) % SIZE;
		 if(index == start) {
		 	printf("Hash table is full.\n");
		 	return;
		 }
	}
	HashTable[index] = x;
	printf("Successfully inserted.\n");
}
void delete(int x) {
	int index = hash(x);
	int start = index;
	while (HashTable[index] != x) {
		 if (HashTable[index] == x) {
			break;
		 }
		 index = (index+1) % SIZE;
		 if(index == start) {
		 	printf("Element not found. So cannot delete the element.\n");
		 	return;
		 }
	}
	HashTable[index] = -1;
	printf("Successfully deleted.\n");
}
void search(int x) {
	int index = hash(x);
	int start = index;
	while (HashTable[index] != x) {
		 if (HashTable[index] == x) {
			break;
		 }
		 index = (index+1) % SIZE;
		 if(index == start) {
		 	printf("Element not found.\n");
		 	return;
		 }
	}
	printf("Element found.\n");
}
void print() {
	int i=0;
	for(;i<SIZE;i++) {
		if(HashTable[i] != -1)
			printf("[%d]=>%d ",i,HashTable[i]);
	}
	printf("\n");
}
